from datetime import datetime
from dao.vehicle_dao import VehicleDAO
from dao.parking_slot_dao import ParkingSlotDAO
from dao.ticket_dao import TicketDAO
from model.vehicle import Vehicle
from model.ticket import Ticket

class ParkingController:

    def view_all_slots(self):
        slots = ParkingSlotDAO.get_all_slots_with_vehicles()

        if not slots:
            print("üì¶ –ù–µ—Ç –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç.")
            return

        print("\nüìç –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç:")
        for slot in slots:
            status = "–ó–ê–ù–Ø–¢–û" if slot["is_occupied"] else "–°–í–û–ë–û–î–ù–û"
            vehicle_info = (
                f"–ê–≤—Ç–æ: {slot['license_plate']} ({slot['vehicle_type']})"
                if slot["is_occupied"] else "–°–≤–æ–±–æ–¥–Ω–æ"
            )
            print(f"Slot #{slot['slot_id']} | –¢–∏–ø: {slot['slot_type']} | –°—Ç–∞—Ç—É—Å: {status} | {vehicle_info}")

    def enter_parking(self, license_plate, vehicle_type):
        existing_vehicle = VehicleDAO.get_vehicle_by_plate(license_plate)
        if existing_vehicle:
            active_ticket = TicketDAO.get_active_ticket_by_vehicle(existing_vehicle.vehicle_id)
            if active_ticket:
                print("‚ùó –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ.")
                return

        available_slots = ParkingSlotDAO.get_all_available_slots(vehicle_type)
        if not available_slots:
            print("üö´ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ç–∏–ø–∞:", vehicle_type)
            return

        print("üîì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:")
        for slot in available_slots:
            print(f" - Slot #{slot.slot_id}")

        selected_slot_id = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏: ").strip()
        try:
            selected_slot_id = int(selected_slot_id)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞.")
            return

        slot = next((s for s in available_slots if s.slot_id == selected_slot_id), None)
        if not slot:
            print("‚ùå –¢–∞–∫–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–µ—Ç.")
            return

        if not existing_vehicle:
            new_vehicle = Vehicle(vehicle_id=None, license_plate=license_plate, vehicle_type=vehicle_type)
            VehicleDAO.add_vehicle(new_vehicle)
            vehicle_id = new_vehicle.vehicle_id
        else:
            vehicle_id = existing_vehicle.vehicle_id

        ticket = Ticket(ticket_id=None, vehicle_id=vehicle_id, slot_id=slot.slot_id)
        TicketDAO.create_ticket(ticket)
        ParkingSlotDAO.update_slot_status(slot.slot_id, True)

        print(f"‚úÖ –ê–≤—Ç–æ {license_plate} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ #{slot.slot_id}")

    def exit_parking(self, license_plate):
        vehicle = VehicleDAO.get_vehicle_by_plate(license_plate)
        if not vehicle:
            print("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        ticket = TicketDAO.get_active_ticket_by_vehicle(vehicle.vehicle_id)
        if not ticket:
            print("‚ÑπÔ∏è –£ –∞–≤—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞.")
            return

        TicketDAO.close_ticket(ticket.ticket_id)
        ticket.exit_time = datetime.now()

        ParkingSlotDAO.update_slot_status(ticket.slot_id, False)

        duration = ticket.get_duration_minutes()
        price = self.calculate_price(duration)

        print(f"üöó –ê–≤—Ç–æ {license_plate} –ø–æ–∫–∏–Ω—É–ª–æ –ø–∞—Ä–∫–æ–≤–∫—É.")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {duration:.2f} –º–∏–Ω—É—Ç | üí∞ –¶–µ–Ω–∞: {price:.2f} —Å–æ–º")

    def calculate_price(self, duration_minutes):
        if duration_minutes is None:
            return 0
        return 10 + (duration_minutes // 15) * 5