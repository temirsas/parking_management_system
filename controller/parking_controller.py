from dao.vehicle_dao import VehicleDAO
from dao.parking_slot_dao import ParkingSlotDAO
from dao.ticket_dao import TicketDAO
from model.vehicle import Vehicle
from model.ticket import Ticket

class ParkingController:

    def enter_parking(self, license_plate, vehicle_type):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ —É–∂–µ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ
        existing_vehicle = VehicleDAO.get_vehicle_by_plate(license_plate)
        if existing_vehicle:
            active_ticket = TicketDAO.get_active_ticket_by_vehicle(existing_vehicle.vehicle_id)
            if active_ticket:
                print("‚ùó –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ.")
                return

        # –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
        slot = ParkingSlotDAO.get_available_slot(vehicle_type)
        if not slot:
            print("üö´ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ç–∏–ø–∞:", vehicle_type)
            return

        # –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–æ–≤–æ–µ
        if not existing_vehicle:
            new_vehicle = Vehicle(vehicle_id=None, license_plate=license_plate, vehicle_type=vehicle_type)
            VehicleDAO.add_vehicle(new_vehicle)
            vehicle_id = new_vehicle.vehicle_id
        else:
            vehicle_id = existing_vehicle.vehicle_id

        # –°–æ–∑–¥–∞—Ç—å –±–∏–ª–µ—Ç
        ticket = Ticket(ticket_id=None, vehicle_id=vehicle_id, slot_id=slot.slot_id)
        TicketDAO.create_ticket(ticket)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç–∞
        ParkingSlotDAO.update_slot_status(slot.slot_id, True)

        print(f"‚úÖ –ê–≤—Ç–æ {license_plate} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ #{slot.slot_id}")

    def exit_parking(self, license_plate):
        vehicle = VehicleDAO.get_vehicle_by_plate(license_plate)
        if not vehicle:
            print("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        ticket = TicketDAO.get_active_ticket_by_vehicle(vehicle.vehicle_id)
        if not ticket:
            print("‚ÑπÔ∏è –£ –∞–≤—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞.")
            return

        # –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∏–ª–µ—Ç
        TicketDAO.close_ticket(ticket.ticket_id)

        # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ
        ParkingSlotDAO.update_slot_status(ticket.slot_id, False)

        duration = ticket.get_duration_minutes()
        price = self.calculate_price(duration)
        print(f"üöó –ê–≤—Ç–æ {license_plate} –ø–æ–∫–∏–Ω—É–ª–æ –ø–∞—Ä–∫–æ–≤–∫—É.")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {duration:.2f} –º–∏–Ω—É—Ç | üí∞ –¶–µ–Ω–∞: {price:.2f} —Å–æ–º")

    def calculate_price(self, duration_minutes):
        if duration_minutes is None:
            return 0
        return 10 + (duration_minutes // 15) * 5  # 10 —Å–æ–º + 5 —Å–æ–º –∑–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω